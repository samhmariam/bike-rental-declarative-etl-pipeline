-- Let's create some aggregations for our dashboard

-- ==========================================================================
-- == MATERIALIZED VIEW: bikes                                             ==
-- ==========================================================================
CREATE OR REFRESH MATERIALIZED VIEW bikes (
  ride_date DATE COMMENT "The date of the rides and associated maintenance check.",
  bike_id STRING COMMENT "Identifier for the bike.",
  total_rides LONG COMMENT "Total number of unique rides for the bike on the given date.",
  total_revenue DECIMAL(19,4) COMMENT "Total revenue generated by the bike on the given date.",
  start_station_id STRING COMMENT "The first station ID from which the bike started a ride on the given date.",
  end_station_id STRING COMMENT "The last station ID at which the bike ended a ride on the given date.",
  requires_maintenance BOOLEAN COMMENT "Boolean flag indicating if the bike had a maintenance log entry on the given date."
)
COMMENT "Daily aggregated bike-level metrics including total rides, revenue, first start station, last end station, and a flag indicating if maintenance was reported for the bike on that day."
AS SELECT
  r.ride_date, 
  r.bike_id, 
  COUNT(DISTINCT r.ride_id) AS total_rides, 
  SUM(r.ride_revenue) :: DECIMAL(19,4) AS total_revenue,
  MIN_BY(r.start_station_id, r.start_time) AS start_station_id, 
  MAX_BY(r.end_station_id, r.end_time) AS end_station_id,
  CASE WHEN ml.maintenance_id IS NOT NULL THEN TRUE ELSE FALSE END AS requires_maintenance
FROM rides r
LEFT JOIN maintenance_logs ml ON r.bike_id = ml.bike_id AND ml.maintenance_date = r.ride_date
GROUP BY ALL;


-- ==========================================================================
-- == MATERIALIZED VIEW: stations                                          ==
-- ==========================================================================
CREATE OR REFRESH MATERIALIZED VIEW stations (
  ride_date DATE COMMENT "The date for which station metrics are aggregated.",
  station_id STRING COMMENT "Identifier for the station.",
  total_rides_as_origin LONG COMMENT "Total number of rides that originated from this station on the given date.",
  total_rides_as_destination LONG COMMENT "Total number of rides that terminated at this station on the given date.",
  end_of_day_inventory LONG COMMENT "Number of bikes located at this station at the end of the given date, based on their last ride's end station.",
  total_revenue_as_origin DECIMAL(19,4) COMMENT "Total revenue generated from rides that originated from this station on the given date.",
  total_revenue_as_destination DECIMAL(19,4) COMMENT "Total revenue generated from rides that terminated at this station on the given date."
)
COMMENT "Daily station-level metrics including rides originating, rides terminating, end-of-day bike inventory, and revenue generated from rides starting or ending at the station."
AS WITH starts AS (
  SELECT ride_date, start_station_id AS station_id, SUM(ride_revenue) AS total_revenue, COUNT(*) AS total_rides FROM rides GROUP BY ALL
), ends AS (
  SELECT ride_date, end_station_id AS station_id, SUM(ride_revenue) AS total_revenue, COUNT(*) AS total_rides FROM rides GROUP BY ALL
), inventory AS (
  SELECT ride_date, end_station_id AS station_id, COUNT(*) AS total_bikes FROM bikes GROUP BY ALL
)
SELECT
  COALESCE(s.ride_date, e.ride_date) AS ride_date,
  COALESCE(s.station_id, e.station_id) AS station_id,
  COALESCE(s.total_rides, 0) AS total_rides_as_origin,
  COALESCE(e.total_rides, 0) AS total_rides_as_destination,
  COALESCE(i.total_bikes, 0) AS end_of_day_inventory,
  COALESCE(s.total_revenue, 0) :: DECIMAL(19,4) AS total_revenue_as_origin,
  COALESCE(e.total_revenue, 0) :: DECIMAL(19,4) AS total_revenue_as_destination
FROM starts s
FULL OUTER JOIN ends e ON s.station_id = e.station_id AND s.ride_date = e.ride_date
LEFT JOIN inventory i ON COALESCE(s.station_id, e.station_id) = i.station_id AND COALESCE(s.ride_date, e.ride_date) = i.ride_date;


-- ==========================================================================
-- == MATERIALIZED VIEW: maintenance_events                                ==
-- ==========================================================================
CREATE OR REFRESH MATERIALIZED VIEW maintenance_events (
  maintenance_id STRING COMMENT "Unique identifier for the maintenance log entry.",
  days_to_resolve INT COMMENT "Number of days taken to resolve the maintenance issue, from reported time to resolved time.",
  revenue_lost DECIMAL(19,4) COMMENT "Typical ride revenue per bike during the maintenance window (ml.reported_time to ml.resolved_time). This can serve as a proxy for potential revenue lost."
)
COMMENT "Maintenance log-level metrics including the number of days taken to resolve an issue and an estimate of typical revenue per bike during the downtime."
AS SELECT
  ml.maintenance_id, 
  DATEDIFF(ml.resolved_time, ml.reported_time) AS days_to_resolve,
  (SUM(r.ride_revenue) / COUNT(DISTINCT r.bike_id)) :: DECIMAL(19,4) AS revenue_lost
FROM maintenance_logs ml
INNER JOIN rides r ON r.start_time > ml.reported_time AND r.start_time < ml.resolved_time
GROUP BY ALL;

